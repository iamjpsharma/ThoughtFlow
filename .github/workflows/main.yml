name: iOS CI with Code Coverage

on:
  push:
    branches:
      - main  # Trigger on push to the main branch
  pull_request:
    branches:
      - main  # Trigger on pull request to the main branch

jobs:
  build:
    name: Build and Test iOS app
    runs-on: macos-latest

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Xcode
      - name: Set up Xcode
        uses: actions/setup-xcode@v3
        with:
          xcode-version: '14.3'  # Replace with your Xcode version

      # Step 3: Install CocoaPods dependencies (if using CocoaPods)
      - name: Install dependencies
        run: |
          sudo gem install cocoapods
          pod install

      # Step 4: Build the app with code coverage enabled
      - name: Build the app with code coverage
        run: |
          xcodebuild -workspace ThoughtFlow.xcworkspace \
                     -scheme ThoughtFlow \
                     -sdk iphonesimulator \
                     -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' \
                     -enableCodeCoverage YES \
                     build

      # Step 5: Run unit tests with code coverage enabled
      - name: Run tests with code coverage
        run: |
          xcodebuild test -workspace ThoughtFlow.xcworkspace \
                          -scheme ThoughtFlowTests \
                          -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' \
                          -enableCodeCoverage YES

      # Step 6: Run UI tests with code coverage enabled
      - name: Run UI tests with code coverage
        run: |
          xcodebuild test -workspace ThoughtFlow.xcworkspace \
                          -scheme ThoughtFlowUITests \
                          -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' \
                          -enableCodeCoverage YES

      # Step 7: Generate Code Coverage Report
      - name: Generate Code Coverage Report
        run: |
          xcrun xccov view --report --json build/Logs/Test/*.xcresult > coverage.json

      # Step 8: Upload code coverage report to GitHub Actions
      - name: Upload Code Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: coverage.json

      # Step 9: Clean up derived data
      - name: Clean up
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData
